--  ---------------------------------------------------------
--  Formatik Server Application.
--  Copyright (c) 2011 Oleg Kertanov <okertanov@gmail.com>
--  ---------------------------------------------------------

--  MySQL Database script for the Formatik project.

--  ---------------------------------------------------------
--  The structure of the database
--  ---------------------------------------------------------

-- 
--  Cleanup 
-- 
drop database if exists `formatikdb`;

-- 
--  Database: formatikdb 
-- 
create database if not exists `formatikdb` 
    default character set = utf8
    default collate = utf8_general_ci;

use formatikdb;

-- 
--  User: formatik@localhost 
-- 
grant usage on `formatikdb`.* to `formatik`@`localhost`;
drop user `formatik`@`localhost`;

create user `formatik`@`localhost` 
    identified by '9sTrTBBnnMO';

grant all privileges on `formatikdb`.* to `formatik`@`localhost`
    with grant option;

-- 
--  Table: operator 
-- 
create table if not exists `operator`
    (
        `id` int not null primary key auto_increment,
        `username`      varchar(64)  unique not null default '',
        `password`      varchar(64)  not null default '',
        `address`       varchar(512) not null default '',
        `phone`         varchar(16)  not null default '',
        `isadmin`       bool    not null default false,
        `description`   varchar(512) not null default '',
        index(`username`),
        index(`isadmin`)
    )
    engine InnoDB 
    comment 'The operator table is used to authenticate the operators.';

-- 
--  Table: place 
-- 
create table if not exists `place`
    (
        `id`            int not null primary key auto_increment,
        `place_op`      int unique not null default 0,
        `name`          varchar(256) not null default '',
        `city`          varchar(256) not null default '',
        `country`       varchar(256) not null default '',
        `geo`           varchar(64)  not null default '',
        `description`   varchar(512) not null default '',
        index(place_op)
    )
    engine InnoDB
    comment 'The place table stores cities list.';

-- 
--  Table: kind 
-- 
create table if not exists `kind`
    (
        `id`            int not null primary key auto_increment,
        `kind_op`       int unique not null default 0,
        `name`          varchar(256) not null default '',
        `description`   varchar(512) not null default '',
        index(`kind_op`)
    )
    engine InnoDB 
    comment 'The kind table is a kinda kindly kind.';

-- 
--  Table: category 
-- 
create table if not exists `category`
    (
        `id`            int not null primary key auto_increment,
        `category_op`   int unique not null default 0,
        `name`          varchar(256) not null default '',
        `description`   varchar(512) not null default '',
        index(`category_op`)
    )
    engine InnoDB 
    comment 'The category table stores categories list indeed.';

-- 
--  Table: package 
-- 
create table if not exists `package`
    (
        `id`            int not null primary key auto_increment,
        `package_op`    int unique not null default 0,
        `name`          varchar(256) not null default '',
        `description`   varchar(512) not null default '',
        index(`package_op`)
    )
    engine InnoDB 
    comment 'The package table stores packages information.';

-- 
--  Table: weightclass 
-- 
create table if not exists `weightclass`
    (
        `id`             int not null primary key auto_increment,
        `weightclass_op` int unique not null default 0,
        `name`           varchar(256) not null default '',
        `description`    varchar(512) not null default '',
        index(`weightclass_op`)
    )
    engine InnoDB 
    comment 'The weightclass table stores weightclass classifiers.';

-- 
--  Table: transport
-- 
create table if not exists `transport`
    (
        `id`             int not null primary key auto_increment,
        `transport_op`   int unique not null default 0,
        `name`           varchar(256) not null default '',
        `description`    varchar(512) not null default '',
        index(`transport_op`)
    )
    engine InnoDB 
    comment 'The transport table stores transportation kind classifiers.';

-- 
--  Table: registration 
-- 
create table if not exists `registration`
    (
        `id`               int not null primary key auto_increment,
        `waybill_nr`       int unique not null default 0,
        `sender`           varchar(256) not null default '',
        `addressee_capt`   varchar(256) not null default '',
        `addressee_name`   varchar(256) not null default '',
        `addressee_addr`   varchar(512) not null default '',
        `addressee_phone`  varchar(16)  not null default '',
        `datetimereceived` varchar(64)  not null default '',
        `datetimestamp`    timestamp default now(),
        `description`      varchar(512) not null default '',
        index(`waybill_nr`), 
        index(`datetimereceived`)
    )
    engine InnoDB 
    comment 'The registartion table stores registration attributes.';

-- 
--  Table: order 
-- 
create table if not exists `order`
    (
        `id`               int not null primary key auto_increment,
        `operator_id`      int not null default 0, 
        `place_id`         int not null default 0, 
        `kind_id`          int not null default 0, 
        `category_id`      int not null default 0, 
        `package_id`       int not null default 0, 
        `weightclass_id`   int not null default 0,  
        `transport_id`     int not null default 0,  
        `registration_id`  int not null default 0, 
        `numplaces`        int not null default 0, 
        `weight`           decimal(10,3) not null default 0000000.000, 
        `evaluated_cost`   decimal(10,2) not null default 00000000.00, 
        `calculated_cost`  decimal(10,2) not null default 00000000.00, 
        `datetimestamp`    timestamp default now(),
        `processed`        bool not null default false,
        `description`      varchar(512) not null default '',
        index(`operator_id`),
        index(`place_id`),
        index(`registration_id`),
        index(`datetimestamp`),
        index(`processed`),
        constraint foreign key(`operator_id`) references `operator`(`id`)           
            on delete restrict on update cascade,
        constraint foreign key(`place_id`) references `place`(`id`)           
            on delete restrict on update cascade,
        constraint foreign key(`kind_id`) references `kind`(`id`)                      
            on delete restrict on update cascade,
        constraint foreign key(`category_id`) references `category`(`id`)          
            on delete restrict on update cascade,
        constraint foreign key(`package_id`) references `package`(`id`)             
            on delete restrict on update cascade,
        constraint foreign key(`weightclass_id`) references `weightclass`(`id`) 
            on delete restrict on update cascade,
        constraint foreign key(`transport_id`) references `transport`(`id`)
            on delete restrict on update cascade,
        constraint foreign key(`registration_id`) references `registration`(`id`) 
            on delete restrict on update cascade
    )
    engine InnoDB 
    comment 'The order table is all about the orders.';

-- 
--  Table: tariff
-- 
create table if not exists `tariff`
    (
        `id`                int not null primary key auto_increment,
        `tariff_op`         int not null default 0, 
        `place_id`          int not null default 0, 
        `transport_id`      int not null default 0,  
        `delivery_days`     varchar(16)  not null default '',
        `wr01`              decimal(10,2) not null default 00000000.00, 
        `wr02`              decimal(10,2) not null default 00000000.00, 
        `wr03`              decimal(10,2) not null default 00000000.00, 
        `wr04`              decimal(10,2) not null default 00000000.00, 
        `wr05`              decimal(10,2) not null default 00000000.00, 
        `wr06`              decimal(10,2) not null default 00000000.00, 
        `wr07`              decimal(10,2) not null default 00000000.00, 
        `wr08`              decimal(10,2) not null default 00000000.00, 
        `wr09`              decimal(10,2) not null default 00000000.00, 
        `wr10`              decimal(10,2) not null default 00000000.00, 
        `wr11`              decimal(10,2) not null default 00000000.00, 
        `wo05`              decimal(10,2) not null default 00000000.00, 
        `wr21`              decimal(10,2) not null default 00000000.00, 
        `wr22`              decimal(10,2) not null default 00000000.00, 
        `wr23`              decimal(10,2) not null default 00000000.00, 
        `wr24`              decimal(10,2) not null default 00000000.00, 
        `wr25`              decimal(10,2) not null default 00000000.00, 
        `wr26`              decimal(10,2) not null default 00000000.00, 
        `wr27`              decimal(10,2) not null default 00000000.00, 
        `wr28`              decimal(10,2) not null default 00000000.00, 
        `wr29`              decimal(10,2) not null default 00000000.00, 
        `wr30`              decimal(10,2) not null default 00000000.00, 
        `wr31`              decimal(10,2) not null default 00000000.00, 
        `wr32`              decimal(10,2) not null default 00000000.00, 
        `wr33`              decimal(10,2) not null default 00000000.00, 
        `wo10`              decimal(10,2) not null default 00000000.00, 
        index(`tariff_op`),
        index(`place_id`),
        index(`transport_id`),
        constraint foreign key(`place_id`) references `place`(`id`)           
            on delete restrict on update cascade,
        constraint foreign key(`transport_id`) references `transport`(`id`) 
            on delete restrict on update cascade
    )
    engine InnoDB 
    comment 'The tariff table is all about the price calculation rules.';

-- 
--  Table: audit
-- 
create table if not exists `audit`
    (
        `id`                int not null primary key auto_increment,
        `operator_id`       int not null default 0, 
        `operator_auth_key` varchar(64) not null default '', -- [auth] => user:a1bf87eacb8f771e4add729714391b71
        `operator_api_key`  varchar(64) not null default '', -- [FormatikAPI] => 8lq8cqid77s4c8rakgd59sabo6
        `operator_api_cmd`  varchar(64) not null default '', 
        `operator_api_data` varchar(64) not null default '', 
        `datetimestamp`     timestamp default now(),
        index(`operator_id`), 
        index(`datetimestamp`)
    )
    engine InnoDB 
    comment 'The audit table is all about the operators activity.';

--  ---------------------------------------------------------
--  Stored procedures 
--  ---------------------------------------------------------

delimiter // 

--  
--  Procedure: check_auth 
--  
drop procedure if exists check_auth//
create procedure check_auth(IN usr varchar(64), IN pwd varchar(64))
    reads sql data
    comment 'Checks auth credintals on the given parameters.'
    begin
        select o.`username`, o.`password`, o.`address`, o.`phone`, o.`isadmin`, o.`description`, 
                (strcmp(o.`password`, pwd) = 0) as authenticated
        from `operator` o
        where ( usr <> '' and pwd <> '' ) and
              ( o.`username` <> '' and o.`password` <> '' ) and
              ( o.`username` =  usr and BINARY o.`password` =  BINARY pwd )
        order by authenticated;
    end//

--  
--  Procedure: get_places
--  
drop procedure if exists get_places//
create procedure get_places()
    reads sql data
    comment 'Retreives places.'
    begin
        select p.`place_op` as cop, p.`name` as cname
        from `place` p
        order by p.`place_op`;
    end//

--  
--  Procedure: get_places_op2id
--  
drop procedure if exists get_places_op2id//
create procedure get_places_op2id(IN op int)
    reads sql data
    comment 'Option to Id for places.'
    begin
        select p.`id` as id
        from `place` p
        where p.`place_op` = op;
    end//

--  
--  Procedure: get_places_id2op
--  
drop procedure if exists get_places_id2op//
create procedure get_places_id2op(IN id int)
    reads sql data
    comment 'Id to Option for places.'
    begin
        select p.`place_op` as op
        from `place` p
        where p.`id` = id;
    end//

--  
--  Procedure: get_kinds
--  
drop procedure if exists get_kinds//
create procedure get_kinds()
    reads sql data
    comment 'Retreives kinds.'
    begin
        select k.`kind_op` as cop, k.`name` as cname
        from `kind` k
        order by k.`kind_op`;
    end//

--  
--  Procedure: get_categories
--  
drop procedure if exists get_categories//
create procedure get_categories()
    reads sql data
    comment 'Retreives categories.'
    begin
        select c.`category_op` as cop, c.`name` as cname
        from `category` c
        order by c.`category_op`;
    end//

--  
--  Procedure: get_packages
--  
drop procedure if exists get_packages//
create procedure get_packages()
    reads sql data
    comment 'Retreives packages.'
    begin
        select p.`package_op` as cop, p.`name` as cname
        from `package` p
        order by p.`package_op`;
    end//

--  
--  Procedure: get_weightclasses
--  
drop procedure if exists get_weightclasses//
create procedure get_weightclasses()
    reads sql data
    comment 'Retreives weightclasses.'
    begin
        select w.`weightclass_op` as cop, w.`name` as cname
        from `weightclass` w
        order by w.`weightclass_op`;
    end//

--  
--  Procedure: get_transports
--  
drop procedure if exists get_transports//
create procedure get_transports()
    reads sql data
    comment 'Retreives transports.'
    begin
        select w.`transport_op` as cop, w.`name` as cname
        from `transport` w
        order by w.`transport_op`;
    end//

delimiter ;

--  ---------------------------------------------------------
--  The initial data for the database
--  ---------------------------------------------------------

-- 
--  Data: operator 
-- 
insert into `operator` (`username`, `password`, `address`, `phone`, `isadmin`, `description`) values
    ('okertanov', MD5('fmQAZ'),     'Riga, Latvia, LV-1012',                    '+37125864676', true,  'The developer of the system.'),
    ('nata',      MD5('fm1234567'), 'Riga, Latvia, LV-1012',                    '+37127700257', true,  'Main system operator.'),
    ('PKS',       MD5('fmPKS'),     'Akademijas laukums 1, Riga',               '+37167320148', false, 'Admin Operator'),
    ('AL1',       MD5('fmAL1'),     'TC Alfa, Brivibas 372, Riga',              '+37167076480', false, 'TC Alfa Operator 1'),
    ('AL2',       MD5('fmAL2'),     'TC Alfa, Brivibas 372, Riga',              '+37167076480', false, 'TC Alfa Operator 2'),
    ('ML1',       MD5('fmML1'),     'TC Mols, Krasta 46, Riga',                 '+37167030388', false, 'TC Mols Operator 1'),
    ('ML2',       MD5('fmML2'),     'TC Mols, Krasta 46, Riga',                 '+37167030388', false, 'TC Mols Operator 2'),
    ('OR1',       MD5('fmOR1'),     'TC Origo, Stacijas laukums 4, Riga',       '+37167073039', false, 'TC Origo Operator 1'),
    ('OR2',       MD5('fmOR2'),     'TC Origo, Stacijas laukums 4, Riga',       '+37167073039', false, 'TC Origo Operator 2'),
    ('GC1',       MD5('fmGC1'),     'TC Galerija centrs,Audeju 16, Riga',       '+37167104547', false, 'TC Galerija centrs Operator 1'),
    ('GC2',       MD5('fmGC2'),     'TC Galerija centrs,Audeju 16, Riga',       '+37167104547', false, 'TC Galerija centrs Operator 2'),
    ('OL1',       MD5('fmOL1'),     'TC Olympia, Azenes 5, Riga',               '+37167065744', false, 'TC Olympia Operator 1'),
    ('OL2',       MD5('fmOL2'),     'TC Olympia, Azenes 5, Riga',               '+37167065744', false, 'TC Olympia Operator 2'),
    ('SP1',       MD5('fmSP1'),     'TC Spice, Lielirbes 29, Riga',             '+37167612580', false, 'TC Spice Operator 1'),
    ('SP2',       MD5('fmSP2'),     'TC Spice, Lielirbes 29, Riga',             '+37167612580', false, 'TC Spice Operator 2'),
    ('MI1',       MD5('fmMI1'),     'TC Minsk, Nicgales 2, Riga',               '+37167562217', false, 'TC Minsk Operator 1'),
    ('MI2',       MD5('fmMI2'),     'TC Minsk, Nicgales 2, Riga',               '+37167562217', false, 'TC Minsk Operator 2'),
    ('RI1',       MD5('fmRI1'),     'TC Rimi, Deglava 110, Riga',               '+37167572200', false, 'TC Rimi Operator 1'),
    ('RI2',       MD5('fmRI2'),     'TC Rimi, Deglava 110, Riga',               '+37167572200', false, 'TC Rimi Operator 2'),
    ('DO1',       MD5('fmDO1'),     'TC Dole, Maskavas 367, Riga',              '+37167106600', false, 'TC Dole Operator 1'),
    ('DO2',       MD5('fmDO2'),     'TC Dole, Maskavas 367, Riga',              '+37167106600', false, 'TC Dole Operator 2'),
    ('DS1',       MD5('fmDS1'),     'Centralaja dzelzcela stacija, tunelis B',  '+37167073034', false, 'Dzelzcela stacija Operator 1'),
    ('DS2',       MD5('fmDS2'),     'Centralaja dzelzcela stacija, tunelis B',  '+37167073034', false, 'Dzelzcela stacija Operator 2');

-- 
--  Data: place 
-- 
insert into `place` (`place_op`, `name`, `city`, `country`, `geo`, `description`) values 
    (1,   'Austria',     '',         'Austria', '', ''), 
    (2,   'Belgium',     '',         'Belgium', '', ''), 
    (3,   'Bulgaria',    '',         'Bulgaria', '', ''), 
    (4,   'Denmark',     '',         'Denmark', '', ''), 
    (5,   'Finland',     '',         'Finland', '', ''), 
    (6,   'Lithuania',   '',         'Lithuania', '', ''), 
    (7,   'Lithuania, Vilnius',      'Vilnius',  'Lithuania', '', ''), 
    (8,   'Estonia',     '',         'Estonia', '', ''), 
    (9,   'Estonia, Tallinn',        'Tallinn',  'Estonia', '', ''), 
    (10,  'France',      '',         'France', '', ''), 
    (11,  'Germany',     '',         'Germany', '', ''), 
    (12,  'Greece',      '',         'Greece', '', ''), 
    (13,  'Hungary',     '',         'Hungary', '', ''), 
    (14,  'Ireland',     '',         'Ireland', '', ''), 
    (15,  'Italy',       '',         'Italy', '', ''), 
    (16,  'Liechtenstein', '',       'Liechtenstein', '', ''), 
    (17,  'Luxembourg',  '',         'Luxembourg', '', ''), 
    (18,  'Macedonia',   '',         'Macedonia', '', ''), 
    (19,  'Monaco',      '',         'Monaco', '', ''), 
    (20,  'Netherlands', '',         'Netherlands', '', ''), 
    (21,  'Norway',      '',         'Norway', '', ''), 
    (22,  'Portugal',    '',         'Portugal', '', ''), 
    (23,  'Romania',     '',         'Romania', '', ''), 
    (24,  'San Marino',  '',         'San Marino', '', ''), 
    (25,  'Andorra',     '',         'Andorra', '', ''), 
    (26,  'Serbia',      '',         'Serbia', '', ''), 
    (27,  'Slovakia',    '',         'Slovakia', '', ''), 
    (28,  'Slovenia',    '',         'Slovenia', '', ''), 
    (29,  'Croatia',     '',         'Croatia', '', ''), 
    (30,  'Bosnia & Herzegovina', '', 'Bosnia & Herzegovina', '', ''), 
    (31,  'Czech Republic', '',      'Czech Republic', '', ''), 
    (32,  'Spain',       '',         'Spain', '', ''), 
    (33,  'Sweden',      '',         'Sweden', '', ''), 
    (34,  'Switzerland', '',         'Switzerland', '', ''), 
    (35,  'Russia',      '',         'Russia', '', ''), 
    (36,  'Russia, Moscow',          'Moscow',   'Russia', '55.751667,37.617778', 'GMT+3, 845 km from Riga.'), 
    (37,  'Russia, Saint Petersburg', 'Saint Petersburg', 'Russia', '59.95,30.316667', 'GMT+3, 500 km from Riga.'), 
    (38,  'Ukraine',     '',         'Ukraine', '', ''), 
    (39,  'Ukraine, Kiev',           'Kiev',     'Ukraine', '', ''), 
    (40,  'Belarus',     '',         'Belarus', '', ''), 
    (41,  'Belarus, Minsk',          'Minsk',    'Belarus', '', ''), 
    (42,  'United Kingdom', '',      'United Kingdom', '', ''), 
    (43,  'Kazakhstan',  '',         'Kazakhstan', '', ''), 
    (44,  'Kazakhstan, Almaty',      'Almaty',   'Kazakhstan', '', ''), 
    (45,  'Uzbekistan, Tashkent',    'Tashkent', 'Uzbekistan', '', ''), 
    (46,  'Kyrgyzstan, Bishkek',     'Bishkek',  'Kyrgyzstan', '', ''), 
    (47,  'Tajikistan, Dushanbe',    'Dushanbe', 'Tajikistan', '', ''), 
    (48,  'Turkmenistan, Ashgabat',  'Ashgabat', 'Turkmenistan', '', ''), 
    (99,  'Citads',      'Other',    'Nowhere', '00.0000,00.0000', 
                                     'Unknown or special place to deliver a package.');

-- 
--  Data: kind 
-- 
insert into `kind` (`kind_op`, `name`, `description`) values 
    (1,     'Документы',            'Вид отправления: Документы (+0 к базовому тарифу)'),
    (2,     'Личные документы',     'Вид отправления: Личные документы (+10 к базовому тарифу)'),
    (3,     'Товар',                'Вид отправления: Товар (+10 lvl к базовому тарифу)');

-- 
--  Data: category 
-- 
insert into `category` (`category_op`, `name`, `description`) values 
    (1,     'Biznesa klase',        '(+0 к базовому тарифу)'),
    (2,     'OFF TIME',             '(*2 к базовому тарифу)'),
    (3,     'Stingri uz rokas',     '(*2 к базовому тарифу)'),
    (4,     'Ekspress',             '(*2 к базовому тарифу)');

-- 
--  Data: package 
-- 
insert into `package` (`package_op`, `name`, `description`) values 
    (1,     'Письмо',               '(до 270 х 350 мм и  0,3 кг максимум)'),
    (2,     'Пакет',                '(до 370 х 410 мм и 5 кг максимум)'), 
    (3,     'Посылка',              '(до 750 х 550 x 500 мм и 31.5 кг максимум)');

-- 
--  Data: weightclass 
-- 
insert into `weightclass` (`weightclass_op`, `name`, `description`) values 
    (1,     'Lidz 200 g',           ''),
    (2,     '0,200 g - 0,500 g',    ''), 
    (3,     '0,501 g - 1 kg',       ''), 
    (4,     '1 kg - 1,5 kg',        ''), 
    (5,     '1,501 kg - 2 kg',      ''), 
    (6,     'Vairak 2 kg',          '');

-- 
--  Data: transport
-- 
insert into `transport` (`transport_op`, `name`, `description`) values 
    (1,     'Auto',                 ''),
    (2,     'Avia',                 '');

-- 
--  TODO: Data: tariff
-- 
insert into `tariff` (`tariff_op`, `place_id`, `transport_id`, `delivery_days`, 
                      `wr01`, `wr02`, `wr03`, `wr04`, `wr05`, `wr06`, `wr07`, `wr08`, `wr09`, `wr10`, `wr11`, `wo05`, 
                      `wr21`, `wr22`, `wr23`, `wr24`, `wr25`, `wr26`, `wr27`, `wr28`, `wr29`, `wr30`, `wr31`, `wr32`, `wr33`, `wo10`) values 
    (
        1, 1, 1, '',
        00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 
        00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00
    ),
    (
        2, 1, 1, '',
        00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 
        00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00, 00.00
    );

-- 
--  TODO: To add test data for the order & registration tables.
-- 

-- 
--  TODO: Visualize database structure & field comments.
-- 

-- 
--  DONE: Rename xyz_id to _op(means option number) for the catalogs, 
--        because zyz_id whould refer to the one-to-one/many relation.
--        NOW _id is the refernece, _op is the frontend's option.
-- 

-- 
--  TODO: Add stored procs: catalog_op_to_id
-- 

